// Generated by CoffeeScript 1.4.0
/* DebrisDemo
*/

var DebrisDemo,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DebrisDemo = (function(_super) {

  __extends(DebrisDemo, _super);

  function DebrisDemo() {
    this.mousemove = __bind(this.mousemove, this);
    return DebrisDemo.__super__.constructor.apply(this, arguments);
  }

  DebrisDemo.prototype.setup = function(full) {
    var bounds, i, max, min, p, _i, _results;
    if (full == null) {
      full = true;
    }
    DebrisDemo.__super__.setup.apply(this, arguments);
    this.physics.integrator = new Verlet();
    this.physics.viscosity = 0.08;
    this.pusher = new Particle();
    this.pusher.collidable = true;
    this.pusher.setRadius(32);
    this.pusher.setMass(1.0);
    this.pusher.fixed = true;
    this.physics.particles.push(this.pusher);
    min = new Vector(0.0, 0.0);
    max = new Vector(this.width, this.height);
    bounds = new EdgeBounce(min, max);
    max = full ? 1000 : 500;
    _results = [];
    for (i = _i = 0; 0 <= max ? _i <= max : _i >= max; i = 0 <= max ? ++_i : --_i) {
      p = new Particle(Random(0.5, 1.0));
      p.setRadius(p.mass * 10);
      p.collidable = true;
      p.moveTo(new Vector(Random(this.width), Random(this.height)));
      p.behaviours.push(bounds);
      _results.push(this.physics.particles.push(p));
    }
    return _results;
  };

  DebrisDemo.prototype.mousemove = function(event) {
    DebrisDemo.__super__.mousemove.apply(this, arguments);
    return this.pusher.pos.copy(this.mouse.pos);
  };

  return DebrisDemo;

})(Demo);
